/*
 * MainFrame.java
 *
 * Created on 16 de Novembro de 2005, 16:29
 */

/**
 *
 * @author  helen
 */

package gui;

import java.awt.Dimension;
import javax.swing.*;

import xml2tcl.Translator;

public class MainFrame extends javax.swing.JFrame {

    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        selectPanel = new javax.swing.JPanel();
        basicConfButton = new javax.swing.JButton();
        accessPointConfButton = new javax.swing.JButton();
        clusterHeadConfButton = new javax.swing.JButton();
        commonNodeConfButton = new javax.swing.JButton();
        mainPanel = new javax.swing.JPanel();
        jMenuBar1 = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        newMenuItem = new javax.swing.JMenuItem();
        openMenuItem = new javax.swing.JMenuItem();
        closeMenuItem = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JSeparator();
        saveMenuItem = new javax.swing.JMenuItem();
        saveAsMenuItem = new javax.swing.JMenuItem();
        exportMenuItem = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JSeparator();
        quitMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("MannaSim Scripts Generator");
        setBackground(new java.awt.Color(241, 242, 217));
        setName("mainFrame");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });

        selectPanel.setLayout(new java.awt.GridLayout(4, 1));

        selectPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        basicConfButton.setBackground(new java.awt.Color(250, 249, 245));
        basicConfButton.setFont(new java.awt.Font("Arial", 1, 12));
        basicConfButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Configuration24.gif")));
        basicConfButton.setText("Basic Configuration");
        basicConfButton.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        basicConfButton.setEnabled(false);
        basicConfButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                basicConfButtonActionPerformed(evt);
            }
        });

        selectPanel.add(basicConfButton);

        accessPointConfButton.setBackground(new java.awt.Color(250, 249, 245));
        accessPointConfButton.setFont(new java.awt.Font("Arial", 1, 12));
        accessPointConfButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/accessPoint.png")));
        accessPointConfButton.setText("Access Point");
        accessPointConfButton.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        accessPointConfButton.setEnabled(false);
        accessPointConfButton.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/accessPointSelected.png")));
        accessPointConfButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                accessPointConfButtonActionPerformed(evt);
            }
        });

        selectPanel.add(accessPointConfButton);

        clusterHeadConfButton.setBackground(new java.awt.Color(250, 249, 245));
        clusterHeadConfButton.setFont(new java.awt.Font("Arial", 1, 12));
        clusterHeadConfButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/clusterHead.png")));
        clusterHeadConfButton.setText("Cluster Head");
        clusterHeadConfButton.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        clusterHeadConfButton.setEnabled(false);
        clusterHeadConfButton.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/clusterHeadSelected.png")));
        clusterHeadConfButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clusterHeadConfButtonActionPerformed(evt);
            }
        });

        selectPanel.add(clusterHeadConfButton);

        commonNodeConfButton.setBackground(new java.awt.Color(250, 249, 245));
        commonNodeConfButton.setFont(new java.awt.Font("Arial", 1, 12));
        commonNodeConfButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/commonNode.png")));
        commonNodeConfButton.setText("Common Node");
        commonNodeConfButton.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        commonNodeConfButton.setDefaultCapable(false);
        commonNodeConfButton.setEnabled(false);
        commonNodeConfButton.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/commonNodeSelected.png")));
        commonNodeConfButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                commonNodeConfButtonActionPerformed(evt);
            }
        });

        selectPanel.add(commonNodeConfButton);

        getContentPane().add(selectPanel, java.awt.BorderLayout.WEST);

        mainPanel.setLayout(new java.awt.GridLayout());

        mainPanel.setBackground(new java.awt.Color(230, 229, 228));
        mainPanel.setMinimumSize(new java.awt.Dimension(32767, 32767));
        mainPanel.setPreferredSize(new java.awt.Dimension(32767, 32767));
        getContentPane().add(mainPanel, java.awt.BorderLayout.CENTER);

        fileMenu.setText("File");
        fileMenu.setFont(new java.awt.Font("Arial", 0, 12));
        newMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        newMenuItem.setFont(new java.awt.Font("Arial", 0, 12));
        newMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/New16.gif")));
        newMenuItem.setText("New...");
        newMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newFileHandler(evt);
            }
        });

        fileMenu.add(newMenuItem);

        openMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        openMenuItem.setFont(new java.awt.Font("Arial", 0, 12));
        openMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Open16.gif")));
        openMenuItem.setText("Open...");
        openMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openFileHandler(evt);
            }
        });

        fileMenu.add(openMenuItem);

        closeMenuItem.setFont(new java.awt.Font("Arial", 0, 12));
        closeMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Blank16.gif")));
        closeMenuItem.setText("Close");
        closeMenuItem.setEnabled(false);
        closeMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeFileHandler(evt);
            }
        });

        fileMenu.add(closeMenuItem);

        fileMenu.add(jSeparator1);

        saveMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        saveMenuItem.setFont(new java.awt.Font("Arial", 0, 12));
        saveMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Save16.gif")));
        saveMenuItem.setText("Save");
        saveMenuItem.setEnabled(false);
        saveMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveFileHandler(evt);
            }
        });

        fileMenu.add(saveMenuItem);

        saveAsMenuItem.setFont(new java.awt.Font("Arial", 0, 12));
        saveAsMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/SaveAs16.gif")));
        saveAsMenuItem.setText("Save as...");
        saveAsMenuItem.setEnabled(false);
        saveAsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveAsFileHandler(evt);
            }
        });

        fileMenu.add(saveAsMenuItem);

        exportMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.CTRL_MASK));
        exportMenuItem.setFont(new java.awt.Font("Arial", 0, 12));
        exportMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Export16.gif")));
        exportMenuItem.setText("Export as TCL file...");
        exportMenuItem.setEnabled(false);
        exportMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportFileHandler(evt);
            }
        });

        fileMenu.add(exportMenuItem);

        fileMenu.add(jSeparator2);

        quitMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.ALT_MASK));
        quitMenuItem.setFont(new java.awt.Font("Arial", 0, 12));
        quitMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Blank16.gif")));
        quitMenuItem.setText("Quit");
        quitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quitMenuItemActionPerformed(evt);
            }
        });

        fileMenu.add(quitMenuItem);

        jMenuBar1.add(fileMenu);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void commonNodeConfButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_commonNodeConfButtonActionPerformed
        displayCommonNodeConf();
    }//GEN-LAST:event_commonNodeConfButtonActionPerformed

    private void clusterHeadConfButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clusterHeadConfButtonActionPerformed
        displayClusterHeadConf();
    }//GEN-LAST:event_clusterHeadConfButtonActionPerformed

    private void accessPointConfButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_accessPointConfButtonActionPerformed
        displayAccessPointConf();
    }//GEN-LAST:event_accessPointConfButtonActionPerformed

    private void basicConfButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_basicConfButtonActionPerformed
        displayBasicConf();
    }//GEN-LAST:event_basicConfButtonActionPerformed

    private void quitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quitMenuItemActionPerformed
        if (xmlSaved){
            quit();
        } else{
            SaveChangesDialog scd = new SaveChangesDialog(mainFrame,true);
            scd.setVisible(true);

            switch (scd.getReturnStatus()){
                case SaveChangesDialog.RET_YES:
                    saveFile();
                    quit();
                    break;

                case SaveChangesDialog.RET_NO:
                    quit();
                    break;

                case SaveChangesDialog.RET_CANCEL:
                    break;
            }
        }
    }//GEN-LAST:event_quitMenuItemActionPerformed

    private void exportFileHandler(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportFileHandler
        exportFile();
    }//GEN-LAST:event_exportFileHandler

    private void saveAsFileHandler(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveAsFileHandler
        saveAsFile();
    }//GEN-LAST:event_saveAsFileHandler

    private void saveFileHandler(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveFileHandler
        saveFile();
    }//GEN-LAST:event_saveFileHandler

    private void closeFileHandler(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeFileHandler
        if (xmlSaved){
            closeFile();
        } else{
            SaveChangesDialog scd = new SaveChangesDialog(mainFrame,true);
            scd.setVisible(true);

            switch (scd.getReturnStatus()){
                case SaveChangesDialog.RET_YES:
                    saveFile();
                    closeFile();
                    break;

                case SaveChangesDialog.RET_NO:
                    closeFile();
                    break;

                case SaveChangesDialog.RET_CANCEL:
                    break;
            }
        }
    }//GEN-LAST:event_closeFileHandler

    private void openFileHandler(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openFileHandler
        if (xmlSaved){
            openFile();
        } else{
            SaveChangesDialog scd = new SaveChangesDialog(mainFrame,true);
            scd.setVisible(true);

            switch (scd.getReturnStatus()){
                case SaveChangesDialog.RET_YES:
                    saveFile();
                    openFile();
                    break;

                case SaveChangesDialog.RET_NO:
                    openFile();
                    break;

                case SaveChangesDialog.RET_CANCEL:
                    break;
            }
        }
    }//GEN-LAST:event_openFileHandler

    private void newFileHandler(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newFileHandler
        if (xmlSaved){
            enableAllConfButtons();
            newFile();
        } else{
            SaveChangesDialog scd = new SaveChangesDialog(mainFrame,true);
            scd.setVisible(true);
            switch (scd.getReturnStatus()){
                case SaveChangesDialog.RET_YES:
                    saveFile();
                    newFile();
                    break;

                case SaveChangesDialog.RET_NO:
                    newFile();
                    break;

                case SaveChangesDialog.RET_CANCEL:
                    break;
            }
        }
    }//GEN-LAST:event_newFileHandler

    /** Exit the Application */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        System.exit(0);
    }//GEN-LAST:event_exitForm

    private void newFile(){
        tcl = new TclFields();
        displayBasicConf();
        xmlSaved = false;
    }

    private void openFile(){
        fileDialog.displayFileDialog(FileJDialog.OPEN);
        if(fileDialog.isActionPerformed()){
            displayBasicConf();
            enableAllConfButtons();
        }
    }

    private void closeFile(){
        disableAllConfButtons();
        mainPanel.removeAll();
        mainPanel.validate();
        mainFrame.validate();
        mainFrame.repaint();
        xmlSaved = true;
    }

    private void saveFile(){
        fileDialog.displayFileDialog(FileJDialog.SAVE);
    }

    private void saveAsFile(){
        fileDialog.displayFileDialog(FileJDialog.SAVE_AS);
    }


    private void exportFile() {
        fileDialog.displayFileDialog(FileJDialog.EXPORT);
    }

    private void quit(){
        mainFrame.setVisible(false);
        mainFrame.dispose();
        System.exit(0);
    }

    public static void setXMLSaved(boolean b){
        xmlSaved = b;
    }

    private void enableAllConfButtons(){
        basicConfButton.setEnabled(true);
        accessPointConfButton.setEnabled(true);
        clusterHeadConfButton.setEnabled(true);
        commonNodeConfButton.setEnabled(true);
        saveMenuItem.setEnabled(true);
        saveAsMenuItem.setEnabled(true);
        closeMenuItem.setEnabled(true);
        exportMenuItem.setEnabled(true);
    }

    private void disableAllConfButtons(){
        basicConfButton.setEnabled(false);
        accessPointConfButton.setEnabled(false);
        clusterHeadConfButton.setEnabled(false);
        commonNodeConfButton.setEnabled(false);
        saveMenuItem.setEnabled(false);
        saveAsMenuItem.setEnabled(false);
        closeMenuItem.setEnabled(false);
        exportMenuItem.setEnabled(false);
    }

    public static BasicConfPanel getBasicConfPanel() {
        bcp = new BasicConfPanel();
        bcp.updateFields(tcl);
        return bcp;
    }

    public static AccessPointConfPanel getAccessPointPanel() {
        apcp = new AccessPointConfPanel();
        apcp.updateFields(tcl);
        return apcp;
    }

    public static ClusterHeadConfPanel getClusterHeadConfPanel() {
        chcp = new ClusterHeadConfPanel();
        chcp.updateFields(tcl);
        return chcp;
    }

    public static CommonNodeConfPanel getCommonNodeConfPanel() {
        cncp = new CommonNodeConfPanel();
        cncp.updateFields(tcl);
        return cncp;
    }

    public void displayBasicConf(){
        mainPanel.removeAll();
        mainPanel.add(getBasicConfPanel());
        mainPanel.validate();
        mainFrame.validate();

    }

    public void displayAccessPointConf(){
        mainPanel.removeAll();
        mainPanel.add(getAccessPointPanel());
        mainPanel.validate();
        mainFrame.validate();
    }

    public void displayClusterHeadConf(){
        mainPanel.removeAll();
        mainPanel.add(getClusterHeadConfPanel());
        mainPanel.validate();
        mainFrame.validate();
    }

    public void displayCommonNodeConf(){
        mainPanel.removeAll();
        mainPanel.add(getCommonNodeConfPanel());
        mainPanel.validate();
        mainFrame.validate();
    }
    public static TclFields getTcl() {
        return tcl;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        mainFrame = new MainFrame();
        //mainFrame.show();
        mainFrame.setSize(700,700);
        mainFrame.setVisible(true);  
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton accessPointConfButton;
    private javax.swing.JButton basicConfButton;
    private javax.swing.JMenuItem closeMenuItem;
    private javax.swing.JButton clusterHeadConfButton;
    private javax.swing.JButton commonNodeConfButton;
    private javax.swing.JMenuItem exportMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JMenuItem newMenuItem;
    private javax.swing.JMenuItem openMenuItem;
    private javax.swing.JMenuItem quitMenuItem;
    private javax.swing.JMenuItem saveAsMenuItem;
    private javax.swing.JMenuItem saveMenuItem;
    private javax.swing.JPanel selectPanel;
    // End of variables declaration//GEN-END:variables

    public static MainFrame mainFrame;
    private static boolean xmlSaved = true;
    private static BasicConfPanel bcp;
    private static AccessPointConfPanel apcp;
    private static ClusterHeadConfPanel chcp;
    private static CommonNodeConfPanel cncp;
    private static TclFields tcl = new TclFields();
    private static FileJDialog fileDialog = new FileJDialog(mainFrame,true);

    public javax.swing.JButton getClusterHeadConfButton() {
		return clusterHeadConfButton;
	}
}
