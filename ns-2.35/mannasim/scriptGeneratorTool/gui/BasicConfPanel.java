/*
 * BasicConfPanel.java
 *
 * Created on 24 de Novembro de 2005, 18:16
 */

package gui;

/**
 *
 * @author  Helen Peters
 */

public class BasicConfPanel extends javax.swing.JPanel {

    /** Creates new form BasicConfPanel */
    public BasicConfPanel() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        buttonGroup1 = new javax.swing.ButtonGroup();
        traceFileNameTextField = new javax.swing.JTextField();
        traceFileCheckBox = new javax.swing.JCheckBox();
        scenarySizeLenLabel = new javax.swing.JLabel();
        scenarySizeXTextField = new javax.swing.JTextField();
        metersLabel1 = new javax.swing.JLabel();
        xLabel = new javax.swing.JLabel();
        scenarySizeYTextField = new javax.swing.JTextField();
        metersLabel2 = new javax.swing.JLabel();
        batteryComboBox = new javax.swing.JComboBox();
        batteryLabel = new javax.swing.JLabel();
        routingProtocolLabel = new javax.swing.JLabel();
        routingProtocolComboBox = new javax.swing.JComboBox();
        ifqLenTextField = new javax.swing.JTextField();
        ifqLenLabel = new javax.swing.JLabel();
        ifqLabel = new javax.swing.JLabel();
        ifqComboBox = new javax.swing.JComboBox();
        propagationComboBox = new javax.swing.JComboBox();
        propagationLabel = new javax.swing.JLabel();
        antennaLabel = new javax.swing.JLabel();
        antennaComboBox = new javax.swing.JComboBox();
        phyComboBox = new javax.swing.JComboBox();
        phyLabel = new javax.swing.JLabel();
        linkLabel = new javax.swing.JLabel();
        linkComboBox = new javax.swing.JComboBox();
        macLayerComboBox = new javax.swing.JComboBox();
        macLabel = new javax.swing.JLabel();
        channelTypeLabel = new javax.swing.JLabel();
        channelTypeTextField = new javax.swing.JTextField();
        transportComboBox = new javax.swing.JComboBox();
        transportLabel = new javax.swing.JLabel();
        simulationTimeLabel = new javax.swing.JLabel();
        startTextField = new javax.swing.JTextField();
        startLabel = new javax.swing.JLabel();
        stopLabel = new javax.swing.JLabel();
        stopTextField = new javax.swing.JTextField();
        traceLabel = new javax.swing.JLabel();
        traceMacRadioButton = new javax.swing.JRadioButton();
        traceRouteRadioButton = new javax.swing.JRadioButton();
        traceAgentRadioButton = new javax.swing.JRadioButton();

        setLayout(null);

        setBackground(new java.awt.Color(240, 238, 231));
        traceFileNameTextField.setFont(new java.awt.Font("Arial", 0, 11));
        traceFileNameTextField.setText("trace.tr");
        traceFileNameTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                traceFileNameTextFieldActionPerformed(evt);
            }
        });
        traceFileNameTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                traceFileNameTextFieldFocusLost(evt);
            }
        });

        add(traceFileNameTextField);
        traceFileNameTextField.setBounds(210, 500, 270, 19);

        traceFileCheckBox.setBackground(new java.awt.Color(240, 238, 231));
        traceFileCheckBox.setFont(new java.awt.Font("Arial", 0, 11));
        traceFileCheckBox.setSelected(true);
        traceFileCheckBox.setText("TRACE FILE NAME:");
        traceFileCheckBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        traceFileCheckBox.setFocusable(false);
        traceFileCheckBox.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        traceFileCheckBox.setMargin(new java.awt.Insets(0, 0, 0, 0));
        traceFileCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                traceFileCheckBoxActionPerformed(evt);
            }
        });

        add(traceFileCheckBox);
        traceFileCheckBox.setBounds(20, 500, 109, 15);

        scenarySizeLenLabel.setFont(new java.awt.Font("Arial", 0, 11));
        scenarySizeLenLabel.setText("SCENARY SIZE:");
        add(scenarySizeLenLabel);
        scenarySizeLenLabel.setBounds(20, 460, 78, 14);

        scenarySizeXTextField.setFont(new java.awt.Font("Arial", 0, 11));
        scenarySizeXTextField.setText("100");
        scenarySizeXTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                scenarySizeXTextFieldActionPerformed(evt);
            }
        });
        scenarySizeXTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                scenarySizeXTextFieldFocusLost(evt);
            }
        });

        add(scenarySizeXTextField);
        scenarySizeXTextField.setBounds(370, 460, 70, 19);

        metersLabel1.setFont(new java.awt.Font("Arial", 0, 11));
        metersLabel1.setText("meters");
        add(metersLabel1);
        metersLabel1.setBounds(290, 460, 33, 20);

        xLabel.setFont(new java.awt.Font("Arial", 0, 11));
        xLabel.setText("x");
        add(xLabel);
        xLabel.setBounds(340, 460, 10, 20);

        scenarySizeYTextField.setFont(new java.awt.Font("Arial", 0, 11));
        scenarySizeYTextField.setText("100");
        scenarySizeYTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                scenarySizeYTextFieldActionPerformed(evt);
            }
        });
        scenarySizeYTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                scenarySizeYTextFieldFocusLost(evt);
            }
        });

        add(scenarySizeYTextField);
        scenarySizeYTextField.setBounds(210, 460, 70, 19);

        metersLabel2.setFont(new java.awt.Font("Arial", 0, 11));
        metersLabel2.setText("meters");
        add(metersLabel2);
        metersLabel2.setBounds(450, 460, 33, 20);

        batteryComboBox.setFont(new java.awt.Font("Arial", 0, 11));
        batteryComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "EnergyModel/Battery" }));
        batteryComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                batteryComboBoxActionPerformed(evt);
            }
        });

        add(batteryComboBox);
        batteryComboBox.setBounds(210, 420, 270, 22);

        batteryLabel.setFont(new java.awt.Font("Arial", 0, 11));
        batteryLabel.setText("BATTERY:");
        add(batteryLabel);
        batteryLabel.setBounds(20, 420, 51, 14);

        routingProtocolLabel.setBackground(java.awt.Color.white);
        routingProtocolLabel.setFont(new java.awt.Font("Arial", 0, 11));
        routingProtocolLabel.setText("ROUTING PROTOCOL:");
        add(routingProtocolLabel);
        routingProtocolLabel.setBounds(20, 100, 107, 14);

        routingProtocolComboBox.setFont(new java.awt.Font("Arial", 0, 11));
        routingProtocolComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "AODV", "DSR", "TORA", "LEACH", "DIRECTED DIFFUSION", "DSDV" }));
        routingProtocolComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                routingProtocolComboBoxActionPerformed(evt);
            }
        });

        add(routingProtocolComboBox);
        routingProtocolComboBox.setBounds(210, 100, 270, 22);

        ifqLenTextField.setFont(new java.awt.Font("Arial", 0, 11));
        ifqLenTextField.setText("100");
        ifqLenTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ifqLenTextFieldActionPerformed(evt);
            }
        });
        ifqLenTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                ifqLenTextFieldFocusLost(evt);
            }
        });

        add(ifqLenTextField);
        ifqLenTextField.setBounds(210, 380, 270, 19);

        ifqLenLabel.setFont(new java.awt.Font("Arial", 0, 11));
        ifqLenLabel.setText("IFQ LENGTH:");
        add(ifqLenLabel);
        ifqLenLabel.setBounds(20, 380, 62, 14);

        ifqLabel.setFont(new java.awt.Font("Arial", 0, 11));
        ifqLabel.setText("INTERFACE QUEUE (IFQ):");
        add(ifqLabel);
        ifqLabel.setBounds(20, 340, 122, 14);

        ifqComboBox.setFont(new java.awt.Font("Arial", 0, 11));
        ifqComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Queue/DropTail/PriQueue", "Queue/RED", "Queue/RED/Pushback", "Queue/RED/RIO", "Queue/DropTail", "Queue/Vq", "Queue/XCP", "Queue/DropTail/XCP" }));
        ifqComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ifqComboBoxActionPerformed(evt);
            }
        });

        add(ifqComboBox);
        ifqComboBox.setBounds(210, 340, 270, 22);

        propagationComboBox.setFont(new java.awt.Font("Arial", 0, 11));
        propagationComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Propagation/TwoRayGround", "Propagation/Shadowing", "Propagation/ShadowingVis", "Propagation/FreeSpace" }));
        propagationComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                propagationComboBoxActionPerformed(evt);
            }
        });

        add(propagationComboBox);
        propagationComboBox.setBounds(210, 300, 270, 22);

        propagationLabel.setFont(new java.awt.Font("Arial", 0, 11));
        propagationLabel.setText("RADIO PROPAGATION:");
        add(propagationLabel);
        propagationLabel.setBounds(20, 300, 112, 14);

        antennaLabel.setFont(new java.awt.Font("Arial", 0, 11));
        antennaLabel.setText("ANTENNA:");
        add(antennaLabel);
        antennaLabel.setBounds(20, 260, 52, 14);

        antennaComboBox.setFont(new java.awt.Font("Arial", 0, 11));
        antennaComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Antena/OmniAntenna" }));
        antennaComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                antennaComboBoxActionPerformed(evt);
            }
        });

        add(antennaComboBox);
        antennaComboBox.setBounds(210, 260, 270, 22);

        phyComboBox.setFont(new java.awt.Font("Arial", 0, 11));
        phyComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Phy/WirelessPhy - Mica2", "Phy/WirelessPhy - 914MHz Lucent WaveLAN DSSS" }));
        phyComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                phyComboBoxActionPerformed(evt);
            }
        });

        add(phyComboBox);
        phyComboBox.setBounds(210, 220, 273, 20);

        phyLabel.setFont(new java.awt.Font("Arial", 0, 11));
        phyLabel.setText("PHYSYCAL LAYER:");
        add(phyLabel);
        phyLabel.setBounds(20, 220, 98, 14);

        linkLabel.setFont(new java.awt.Font("Arial", 0, 11));
        linkLabel.setText("LINK:");
        add(linkLabel);
        linkLabel.setBounds(20, 180, 25, 14);

        linkComboBox.setFont(new java.awt.Font("Arial", 0, 11));
        linkComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "LL" }));
        linkComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                linkComboBoxActionPerformed(evt);
            }
        });

        add(linkComboBox);
        linkComboBox.setBounds(210, 180, 270, 22);

        macLayerComboBox.setFont(new java.awt.Font("Arial", 0, 11));
        macLayerComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Mac/802_11" }));
        macLayerComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                macLayerComboBoxActionPerformed(evt);
            }
        });

        add(macLayerComboBox);
        macLayerComboBox.setBounds(210, 140, 270, 22);

        macLabel.setFont(new java.awt.Font("Arial", 0, 11));
        macLabel.setText("MAC:");
        add(macLabel);
        macLabel.setBounds(20, 140, 26, 14);

        channelTypeLabel.setFont(new java.awt.Font("Arial", 0, 11));
        channelTypeLabel.setText("CHANNEL TYPE:");
        add(channelTypeLabel);
        channelTypeLabel.setBounds(20, 20, 80, 14);

        channelTypeTextField.setBackground(new java.awt.Color(240, 238, 231));
        channelTypeTextField.setEditable(false);
        channelTypeTextField.setFont(new java.awt.Font("Arial", 0, 11));
        channelTypeTextField.setText("Channel/WirelessChannel");
        channelTypeTextField.setDisabledTextColor(new java.awt.Color(255, 255, 255));
        add(channelTypeTextField);
        channelTypeTextField.setBounds(210, 20, 270, 19);

        transportComboBox.setFont(new java.awt.Font("Arial", 0, 11));
        transportComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "UDP", "TCP" }));
        transportComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                transportComboBoxActionPerformed(evt);
            }
        });

        add(transportComboBox);
        transportComboBox.setBounds(210, 60, 270, 22);

        transportLabel.setBackground(java.awt.Color.white);
        transportLabel.setFont(new java.awt.Font("Arial", 0, 11));
        transportLabel.setText("TRANSPORT  PROTOCOL:");
        add(transportLabel);
        transportLabel.setBounds(20, 60, 127, 14);

        simulationTimeLabel.setFont(new java.awt.Font("Arial", 0, 11));
        simulationTimeLabel.setText("SIMULATION TIME:");
        add(simulationTimeLabel);
        simulationTimeLabel.setBounds(20, 580, 89, 14);

        startTextField.setFont(new java.awt.Font("Arial", 0, 11));
        startTextField.setText("1");
        startTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startTextFieldActionPerformed(evt);
            }
        });
        startTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                startTextFieldFocusLost(evt);
            }
        });

        add(startTextField);
        startTextField.setBounds(250, 580, 90, 19);

        startLabel.setFont(new java.awt.Font("Arial", 0, 11));
        startLabel.setText("START:");
        add(startLabel);
        startLabel.setBounds(210, 580, 37, 20);

        stopLabel.setFont(new java.awt.Font("Arial", 0, 11));
        stopLabel.setText("STOP:");
        add(stopLabel);
        stopLabel.setBounds(360, 580, 30, 20);

        stopTextField.setFont(new java.awt.Font("Arial", 0, 11));
        stopTextField.setText("100");
        stopTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopTextFieldActionPerformed(evt);
            }
        });
        stopTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                stopTextFieldFocusLost(evt);
            }
        });

        add(stopTextField);
        stopTextField.setBounds(390, 580, 90, 19);

        traceLabel.setFont(new java.awt.Font("Arial", 0, 11));
        traceLabel.setText("TRACE:");
        add(traceLabel);
        traceLabel.setBounds(20, 540, 37, 14);

        traceMacRadioButton.setBackground(new java.awt.Color(240, 238, 231));
        traceMacRadioButton.setFont(new java.awt.Font("Arial", 0, 11));
        traceMacRadioButton.setSelected(true);
        traceMacRadioButton.setText("TRACE-MAC");
        traceMacRadioButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        traceMacRadioButton.setMargin(new java.awt.Insets(0, 0, 0, 0));
        traceMacRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                traceMacRadioButtonActionPerformed(evt);
            }
        });

        add(traceMacRadioButton);
        traceMacRadioButton.setBounds(210, 540, 79, 15);

        traceRouteRadioButton.setBackground(new java.awt.Color(240, 238, 231));
        traceRouteRadioButton.setFont(new java.awt.Font("Arial", 0, 11));
        traceRouteRadioButton.setSelected(true);
        traceRouteRadioButton.setText("TRACE-ROUTE");
        traceRouteRadioButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        traceRouteRadioButton.setMargin(new java.awt.Insets(0, 0, 0, 0));
        traceRouteRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                traceRouteRadioButtonActionPerformed(evt);
            }
        });

        add(traceRouteRadioButton);
        traceRouteRadioButton.setBounds(300, 540, 89, 15);

        traceAgentRadioButton.setBackground(new java.awt.Color(240, 238, 231));
        traceAgentRadioButton.setFont(new java.awt.Font("Arial", 0, 11));
        traceAgentRadioButton.setSelected(true);
        traceAgentRadioButton.setText("TRACE-AGENT");
        traceAgentRadioButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        traceAgentRadioButton.setMargin(new java.awt.Insets(0, 0, 0, 0));
        traceAgentRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                traceAgentRadioButtonActionPerformed(evt);
            }
        });

        add(traceAgentRadioButton);
        traceAgentRadioButton.setBounds(400, 540, 91, 15);

    }// </editor-fold>//GEN-END:initComponents

    private void stopTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_stopTextFieldFocusLost
 
        javax.swing.JTextField textField = (javax.swing.JTextField) evt.getSource();
          String content = textField.getText();
          if (content.length() != 0) {
            try {
              double aux = Double.parseDouble(content);
              MainFrame.getTcl().setSimulationStop(aux);
            } catch (NumberFormatException nfe) {
              textField.requestFocus();
            }
          }
    }//GEN-LAST:event_stopTextFieldFocusLost

    private void traceFileNameTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_traceFileNameTextFieldFocusLost
  
        javax.swing.JTextField textField = (javax.swing.JTextField) evt.getSource();
          String content = textField.getText();
          MainFrame.getTcl().setTraceFileName(content);
    }//GEN-LAST:event_traceFileNameTextFieldFocusLost



    private void startTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_startTextFieldFocusLost
  
        javax.swing.JTextField textField = (javax.swing.JTextField) evt.getSource();
          String content = textField.getText();
          if (content.length() != 0) {
            try {
              double aux = Double.parseDouble(content);
              MainFrame.getTcl().setSimulationStart(aux);
            } catch (NumberFormatException nfe) {
              textField.requestFocus();
            }
          }
    }//GEN-LAST:event_startTextFieldFocusLost

    private void scenarySizeXTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_scenarySizeXTextFieldFocusLost
          javax.swing.JTextField textField = (javax.swing.JTextField) evt.getSource();
          String content = textField.getText();
          if (content.length() != 0) {
            try {
              int aux = Integer.parseInt(content);
              MainFrame.getTcl().setScenarioX(aux);
            } catch (NumberFormatException nfe) {
              textField.requestFocus();
            }
          }
    }//GEN-LAST:event_scenarySizeXTextFieldFocusLost

    private void scenarySizeYTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_scenarySizeYTextFieldFocusLost
          javax.swing.JTextField textField = (javax.swing.JTextField) evt.getSource();
          String content = textField.getText();
          if (content.length() != 0) {
            try {
              int aux = Integer.parseInt(content);
              MainFrame.getTcl().setScenarioY (aux);
            } catch (NumberFormatException nfe) {
              textField.requestFocus();
            }
          }
    }//GEN-LAST:event_scenarySizeYTextFieldFocusLost

    private void ifqLenTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_ifqLenTextFieldFocusLost
          javax.swing.JTextField textField = (javax.swing.JTextField) evt.getSource();
          String content = textField.getText();
          if (content.length() != 0) {
            try {
              int aux = Integer.parseInt(content);
              MainFrame.getTcl().setIfqLen(aux);
            } catch (NumberFormatException nfe) {
              textField.requestFocus();
            }
          }
    }//GEN-LAST:event_ifqLenTextFieldFocusLost

    private void stopTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopTextFieldActionPerformed

        double time = 0;
        String s = scenarySizeYTextField.getText();
        if (s.length() != 0) {
            try {
                time = Double.parseDouble(s);
                MainFrame.getTcl().setSimulationStop(time);
            } catch (NumberFormatException nfe) {
                getToolkit().beep();
                scenarySizeXTextField.requestFocus();
            }
        }
        MainFrame.setXMLSaved(false);
    }//GEN-LAST:event_stopTextFieldActionPerformed

    private void startTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startTextFieldActionPerformed

        double time = 0;
        String s = scenarySizeYTextField.getText();
        if (s.length() != 0) {
            try {
                time = Double.parseDouble(s);
                MainFrame.getTcl().setSimulationStart(time);
            } catch (NumberFormatException nfe) {
                getToolkit().beep();
                scenarySizeXTextField.requestFocus();
            }
        }
        MainFrame.setXMLSaved(false);
    }//GEN-LAST:event_startTextFieldActionPerformed

    private void traceAgentRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_traceAgentRadioButtonActionPerformed

        MainFrame.getTcl().setTraceAgent(traceAgentRadioButton.isSelected());
        MainFrame.setXMLSaved(false);
    }//GEN-LAST:event_traceAgentRadioButtonActionPerformed

    private void traceRouteRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_traceRouteRadioButtonActionPerformed

        MainFrame.getTcl().setTraceRoute(traceRouteRadioButton.isSelected());
        MainFrame.setXMLSaved(false);
    }//GEN-LAST:event_traceRouteRadioButtonActionPerformed


    private void traceMacRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_traceMacRadioButtonActionPerformed
        MainFrame.getTcl().setTraceMac(traceMacRadioButton.isSelected());
        MainFrame.setXMLSaved(false);
    }//GEN-LAST:event_traceMacRadioButtonActionPerformed

    private void traceFileNameTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_traceFileNameTextFieldActionPerformed

        MainFrame.getTcl().setTraceFileName(traceFileNameTextField.getText());
        MainFrame.setXMLSaved(false);
    }//GEN-LAST:event_traceFileNameTextFieldActionPerformed

    private void traceFileCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_traceFileCheckBoxActionPerformed

        MainFrame.getTcl().setTraceFile(traceFileCheckBox.isSelected());
        MainFrame.setXMLSaved(false);
    }//GEN-LAST:event_traceFileCheckBoxActionPerformed

    private void scenarySizeYTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_scenarySizeYTextFieldActionPerformed

        int size = 0;
        String s = scenarySizeYTextField.getText();
        if (s.length() != 0) {
            try {
                size = Integer.parseInt(s);
                MainFrame.getTcl().setScenarioY(size);
            } catch (NumberFormatException nfe) {
                scenarySizeXTextField.requestFocus();
            }
        }
        MainFrame.setXMLSaved(false);
    }//GEN-LAST:event_scenarySizeYTextFieldActionPerformed

    private void scenarySizeXTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_scenarySizeXTextFieldActionPerformed

        int size = 0;
        String s = scenarySizeXTextField.getText();
        if (s.length() != 0) {
            try {
                size = Integer.parseInt(s);
                MainFrame.getTcl().setScenarioX(size);
            } catch (NumberFormatException nfe) {
                getToolkit().beep();
                scenarySizeXTextField.requestFocus();
            }
        }
        MainFrame.setXMLSaved(false);
    }//GEN-LAST:event_scenarySizeXTextFieldActionPerformed

    private void batteryComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_batteryComboBoxActionPerformed

        MainFrame.getTcl().setBattery((String) batteryComboBox.getSelectedItem());
        MainFrame.setXMLSaved(false);
    }//GEN-LAST:event_batteryComboBoxActionPerformed

    private void ifqLenTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ifqLenTextFieldActionPerformed

        int ifqLen = 0;
        String s = ifqLenTextField.getText();
        if (s.length() != 0) {
            try {
                ifqLen = Integer.parseInt(s);
                MainFrame.getTcl().setIfqLen(ifqLen);
            } catch (NumberFormatException nfe) {
                getToolkit().beep();
                ifqLenTextField.requestFocus();
            }
        }
        MainFrame.setXMLSaved(false);
    }//GEN-LAST:event_ifqLenTextFieldActionPerformed

    private void ifqComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ifqComboBoxActionPerformed

        MainFrame.getTcl().setIfq((String) ifqComboBox.getSelectedItem());
        MainFrame.setXMLSaved(false);
    }//GEN-LAST:event_ifqComboBoxActionPerformed

    private void propagationComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_propagationComboBoxActionPerformed

        MainFrame.getTcl().setPropagation((String) propagationComboBox.getSelectedItem());
        MainFrame.setXMLSaved(false);
    }//GEN-LAST:event_propagationComboBoxActionPerformed

    private void antennaComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_antennaComboBoxActionPerformed

        MainFrame.getTcl().setAntenna((String) antennaComboBox.getSelectedItem());
        MainFrame.setXMLSaved(false);
    }//GEN-LAST:event_antennaComboBoxActionPerformed

    private void phyComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_phyComboBoxActionPerformed

        MainFrame.getTcl().setPhyLayer((String) phyComboBox.getSelectedItem());
        MainFrame.setXMLSaved(false);
    }//GEN-LAST:event_phyComboBoxActionPerformed

    private void linkComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_linkComboBoxActionPerformed

        MainFrame.getTcl().setLinkLayer((String) linkComboBox.getSelectedItem());
        MainFrame.setXMLSaved(false);
    }//GEN-LAST:event_linkComboBoxActionPerformed

    private void macLayerComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_macLayerComboBoxActionPerformed

        MainFrame.getTcl().setMacLayer((String) macLayerComboBox.getSelectedItem());
        MainFrame.setXMLSaved(false);
    }//GEN-LAST:event_macLayerComboBoxActionPerformed

    private void routingProtocolComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_routingProtocolComboBoxActionPerformed
    	String sl = ((String) routingProtocolComboBox.getSelectedItem()).toLowerCase();
    	
        MainFrame.getTcl().setRoutingProtocol((String) routingProtocolComboBox.getSelectedItem());
        MainFrame.setXMLSaved(false);
        
        if (sl.compareTo("leach") == 0) {
        	MainFrame.getTcl().setAccessPointApplication("Application/AccessPointApp/AccessPointLeachApp");
        	MainFrame.getTcl().setCommonNodeApplication("Application/SensorBaseApp/CommonNodeApp/LeachApp");
        	MainFrame.mainFrame.getClusterHeadConfButton().setEnabled(false);
        }
        else if (sl.compareTo("dd") == 0 || sl.compareTo("directed diffusion") == 0 ||
        		sl.compareTo("directeddiffusion") == 0) {
        	MainFrame.getTcl().setAccessPointApplication("Application/AccessPointDiffApp");
        	MainFrame.getTcl().setCommonNodeApplication("Application/SensorBaseApp/CommonNodeDiffApp");
        	MainFrame.mainFrame.getClusterHeadConfButton().setEnabled(false);
        }
        else {
        	MainFrame.mainFrame.getClusterHeadConfButton().setEnabled(true);
        }
    }//GEN-LAST:event_routingProtocolComboBoxActionPerformed

    private void transportComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_transportComboBoxActionPerformed

        MainFrame.getTcl().setTransportProtocol((String)transportComboBox.getSelectedItem());
        MainFrame.setXMLSaved(false);
    }//GEN-LAST:event_transportComboBoxActionPerformed


    private void setTraceFileNameTextField(String s) {
        traceFileNameTextField.setText(s);
    }

    private void setTraceFileCheckBox(boolean b) {
        traceFileCheckBox.setSelected(b);
    }

    private void setScenarySizeYTextField(String s) {
        scenarySizeYTextField.setText(s);
    }

    private void setScenarySizeXTextField(String s) {
        scenarySizeXTextField.setText(s);
    }

    private void setBatteryComboBox(String s) {
        batteryComboBox.addItem(s);
        batteryComboBox.setSelectedItem(s);
    }

    private void setIfqLenTextField(String s) {
        ifqLenTextField.setText(s);
    }

    private void setIfqComboBox(String s) {
        ifqComboBox.addItem(s);
        ifqComboBox.setSelectedItem(s);
    }

    private void setPropagationComboBox(String s) {
        propagationComboBox.addItem(s);
        propagationComboBox.setSelectedItem(s);
    }

    private void setAntennaComboBox(String s) {
        antennaComboBox.addItem(s);
        antennaComboBox.setSelectedItem(s);
    }

    private void setPhyComboBox(String s) {
        phyComboBox.addItem(s);
        phyComboBox.setSelectedItem(s);
    }

    private void setLinkComboBox(String s) {
        linkComboBox.addItem(s);
        linkComboBox.setSelectedItem(s);
    }

    private void setMacLayerComboBox(String s) {
        macLayerComboBox.addItem(s);
        macLayerComboBox.setSelectedItem(s);
    }

    private void setRoutingProtocolComboBox(String s) {
        routingProtocolComboBox.addItem(s);
        routingProtocolComboBox.setSelectedItem(s);
    }

    private void setTransportComboBox(String s) {
        transportComboBox.addItem(s);
        transportComboBox.setSelectedItem(s);
    }

    private void setTraceMacRadioButton(boolean b){
        traceMacRadioButton.setSelected(b);        
    }

    private void setTraceRouteRadioButton(boolean b){
        traceRouteRadioButton.setSelected(b);
    }

    private void setTraceAgentRadioButton(boolean b){
        traceAgentRadioButton.setSelected(b);
    }
    
    private void setStartTextField(String s) {
        startTextField.setText(s);
    }
    
    private void setStopTextField(String s) {
        stopTextField.setText(s);
    }

    public void updateFields(TclFields tcl){    
        setTransportComboBox(tcl.getTransportProtocol());
        setRoutingProtocolComboBox(tcl.getRoutingProtocol());        
        setMacLayerComboBox(tcl.getMacLayer());
        setLinkComboBox(tcl.getLinkLayer());
        setPhyComboBox(tcl.getPhyLayer());        
        setAntennaComboBox(tcl.getAntenna());
        setPropagationComboBox(tcl.getPropagation());
        setIfqComboBox(tcl.getIfq());
        setIfqLenTextField(String.valueOf(tcl.getIfqLen()));
        setBatteryComboBox(tcl.getBattery());
        setScenarySizeXTextField(String.valueOf(tcl.getScenarioX()));               
        setScenarySizeYTextField(String.valueOf(tcl.getScenarioY()));
        setTraceFileNameTextField(tcl.getTraceFileName());
        setTraceFileCheckBox(tcl.isTraceFile());
	setTraceMacRadioButton(tcl.isTraceMac());
	setTraceRouteRadioButton(tcl.isTraceRoute());
	setTraceAgentRadioButton(tcl.isTraceAgent());
        setStartTextField(String.valueOf(tcl.getSimulationStart()));
        setStopTextField(String.valueOf(tcl.getSimulationStop()));
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox antennaComboBox;
    private javax.swing.JLabel antennaLabel;
    private javax.swing.JComboBox batteryComboBox;
    private javax.swing.JLabel batteryLabel;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JLabel channelTypeLabel;
    private javax.swing.JTextField channelTypeTextField;
    private javax.swing.JComboBox ifqComboBox;
    private javax.swing.JLabel ifqLabel;
    private javax.swing.JLabel ifqLenLabel;
    private javax.swing.JTextField ifqLenTextField;
    private javax.swing.JComboBox linkComboBox;
    private javax.swing.JLabel linkLabel;
    private javax.swing.JLabel macLabel;
    private javax.swing.JComboBox macLayerComboBox;
    private javax.swing.JLabel metersLabel1;
    private javax.swing.JLabel metersLabel2;
    private javax.swing.JComboBox phyComboBox;
    private javax.swing.JLabel phyLabel;
    private javax.swing.JComboBox propagationComboBox;
    private javax.swing.JLabel propagationLabel;
    private javax.swing.JComboBox routingProtocolComboBox;
    private javax.swing.JLabel routingProtocolLabel;
    private javax.swing.JLabel scenarySizeLenLabel;
    private javax.swing.JTextField scenarySizeXTextField;
    private javax.swing.JTextField scenarySizeYTextField;
    private javax.swing.JLabel simulationTimeLabel;
    private javax.swing.JLabel startLabel;
    private javax.swing.JTextField startTextField;
    private javax.swing.JLabel stopLabel;
    private javax.swing.JTextField stopTextField;
    private javax.swing.JRadioButton traceAgentRadioButton;
    private javax.swing.JCheckBox traceFileCheckBox;
    private javax.swing.JTextField traceFileNameTextField;
    private javax.swing.JLabel traceLabel;
    private javax.swing.JRadioButton traceMacRadioButton;
    private javax.swing.JRadioButton traceRouteRadioButton;
    private javax.swing.JComboBox transportComboBox;
    private javax.swing.JLabel transportLabel;
    private javax.swing.JLabel xLabel;
    // End of variables declaration//GEN-END:variables

}
